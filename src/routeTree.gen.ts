/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthFaqImport } from './routes/_auth/faq'
import { Route as AuthFactotumImport } from './routes/_auth/factotum'
import { Route as AuthEvaluatorImport } from './routes/_auth/evaluator'
import { Route as AuthLivesitesSiteIdImport } from './routes/_auth/livesites/$siteId'
import { Route as AuthHackathonsHackathonIdImport } from './routes/_auth/hackathons/$hackathonId'
import { Route as AuthApplicationsDocumentIdImport } from './routes/_auth/applications/$documentId'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthFaqRoute = AuthFaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthFactotumRoute = AuthFactotumImport.update({
  id: '/factotum',
  path: '/factotum',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthEvaluatorRoute = AuthEvaluatorImport.update({
  id: '/evaluator',
  path: '/evaluator',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLivesitesSiteIdRoute = AuthLivesitesSiteIdImport.update({
  id: '/livesites/$siteId',
  path: '/livesites/$siteId',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthHackathonsHackathonIdRoute = AuthHackathonsHackathonIdImport.update({
  id: '/hackathons/$hackathonId',
  path: '/hackathons/$hackathonId',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthApplicationsDocumentIdRoute = AuthApplicationsDocumentIdImport.update(
  {
    id: '/applications/$documentId',
    path: '/applications/$documentId',
    getParentRoute: () => AuthRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/_auth/evaluator': {
      id: '/_auth/evaluator'
      path: '/evaluator'
      fullPath: '/evaluator'
      preLoaderRoute: typeof AuthEvaluatorImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/factotum': {
      id: '/_auth/factotum'
      path: '/factotum'
      fullPath: '/factotum'
      preLoaderRoute: typeof AuthFactotumImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/faq': {
      id: '/_auth/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof AuthFaqImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/applications/$documentId': {
      id: '/_auth/applications/$documentId'
      path: '/applications/$documentId'
      fullPath: '/applications/$documentId'
      preLoaderRoute: typeof AuthApplicationsDocumentIdImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/hackathons/$hackathonId': {
      id: '/_auth/hackathons/$hackathonId'
      path: '/hackathons/$hackathonId'
      fullPath: '/hackathons/$hackathonId'
      preLoaderRoute: typeof AuthHackathonsHackathonIdImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/livesites/$siteId': {
      id: '/_auth/livesites/$siteId'
      path: '/livesites/$siteId'
      fullPath: '/livesites/$siteId'
      preLoaderRoute: typeof AuthLivesitesSiteIdImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthEvaluatorRoute: typeof AuthEvaluatorRoute
  AuthFactotumRoute: typeof AuthFactotumRoute
  AuthFaqRoute: typeof AuthFaqRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AuthApplicationsDocumentIdRoute: typeof AuthApplicationsDocumentIdRoute
  AuthHackathonsHackathonIdRoute: typeof AuthHackathonsHackathonIdRoute
  AuthLivesitesSiteIdRoute: typeof AuthLivesitesSiteIdRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthEvaluatorRoute: AuthEvaluatorRoute,
  AuthFactotumRoute: AuthFactotumRoute,
  AuthFaqRoute: AuthFaqRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthApplicationsDocumentIdRoute: AuthApplicationsDocumentIdRoute,
  AuthHackathonsHackathonIdRoute: AuthHackathonsHackathonIdRoute,
  AuthLivesitesSiteIdRoute: AuthLivesitesSiteIdRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/evaluator': typeof AuthEvaluatorRoute
  '/factotum': typeof AuthFactotumRoute
  '/faq': typeof AuthFaqRoute
  '/': typeof AuthIndexRoute
  '/applications/$documentId': typeof AuthApplicationsDocumentIdRoute
  '/hackathons/$hackathonId': typeof AuthHackathonsHackathonIdRoute
  '/livesites/$siteId': typeof AuthLivesitesSiteIdRoute
}

export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/evaluator': typeof AuthEvaluatorRoute
  '/factotum': typeof AuthFactotumRoute
  '/faq': typeof AuthFaqRoute
  '/': typeof AuthIndexRoute
  '/applications/$documentId': typeof AuthApplicationsDocumentIdRoute
  '/hackathons/$hackathonId': typeof AuthHackathonsHackathonIdRoute
  '/livesites/$siteId': typeof AuthLivesitesSiteIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/_auth/evaluator': typeof AuthEvaluatorRoute
  '/_auth/factotum': typeof AuthFactotumRoute
  '/_auth/faq': typeof AuthFaqRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/applications/$documentId': typeof AuthApplicationsDocumentIdRoute
  '/_auth/hackathons/$hackathonId': typeof AuthHackathonsHackathonIdRoute
  '/_auth/livesites/$siteId': typeof AuthLivesitesSiteIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/signin'
    | '/evaluator'
    | '/factotum'
    | '/faq'
    | '/'
    | '/applications/$documentId'
    | '/hackathons/$hackathonId'
    | '/livesites/$siteId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/evaluator'
    | '/factotum'
    | '/faq'
    | '/'
    | '/applications/$documentId'
    | '/hackathons/$hackathonId'
    | '/livesites/$siteId'
  id:
    | '__root__'
    | '/_auth'
    | '/signin'
    | '/_auth/evaluator'
    | '/_auth/factotum'
    | '/_auth/faq'
    | '/_auth/'
    | '/_auth/applications/$documentId'
    | '/_auth/hackathons/$hackathonId'
    | '/_auth/livesites/$siteId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/signin"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/evaluator",
        "/_auth/factotum",
        "/_auth/faq",
        "/_auth/",
        "/_auth/applications/$documentId",
        "/_auth/hackathons/$hackathonId",
        "/_auth/livesites/$siteId"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_auth/evaluator": {
      "filePath": "_auth/evaluator.tsx",
      "parent": "/_auth"
    },
    "/_auth/factotum": {
      "filePath": "_auth/factotum.tsx",
      "parent": "/_auth"
    },
    "/_auth/faq": {
      "filePath": "_auth/faq.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/applications/$documentId": {
      "filePath": "_auth/applications/$documentId.tsx",
      "parent": "/_auth"
    },
    "/_auth/hackathons/$hackathonId": {
      "filePath": "_auth/hackathons/$hackathonId.tsx",
      "parent": "/_auth"
    },
    "/_auth/livesites/$siteId": {
      "filePath": "_auth/livesites/$siteId.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
