/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthQueryImport } from './routes/_auth/query'
import { Route as AuthFaqImport } from './routes/_auth/faq'
import { Route as AuthFactotumImport } from './routes/_auth/factotum'
import { Route as AuthEvaluatorImport } from './routes/_auth/evaluator'
import { Route as AuthHackathonsHackathonIdIndexImport } from './routes/_auth/hackathons/$hackathonId/index'
import { Route as AuthHackathonsHackathonIdSponsorsImport } from './routes/_auth/hackathons/$hackathonId/sponsors'
import { Route as AuthHackathonsHackathonIdScheduleImport } from './routes/_auth/hackathons/$hackathonId/schedule'
import { Route as AuthHackathonsHackathonIdApplicationImport } from './routes/_auth/hackathons/$hackathonId/application'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthQueryRoute = AuthQueryImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthFaqRoute = AuthFaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthFactotumRoute = AuthFactotumImport.update({
  id: '/factotum',
  path: '/factotum',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthEvaluatorRoute = AuthEvaluatorImport.update({
  id: '/evaluator',
  path: '/evaluator',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthHackathonsHackathonIdIndexRoute =
  AuthHackathonsHackathonIdIndexImport.update({
    id: '/hackathons/$hackathonId/',
    path: '/hackathons/$hackathonId/',
    getParentRoute: () => AuthRouteRoute,
  } as any)

const AuthHackathonsHackathonIdSponsorsRoute =
  AuthHackathonsHackathonIdSponsorsImport.update({
    id: '/hackathons/$hackathonId/sponsors',
    path: '/hackathons/$hackathonId/sponsors',
    getParentRoute: () => AuthRouteRoute,
  } as any)

const AuthHackathonsHackathonIdScheduleRoute =
  AuthHackathonsHackathonIdScheduleImport.update({
    id: '/hackathons/$hackathonId/schedule',
    path: '/hackathons/$hackathonId/schedule',
    getParentRoute: () => AuthRouteRoute,
  } as any)

const AuthHackathonsHackathonIdApplicationRoute =
  AuthHackathonsHackathonIdApplicationImport.update({
    id: '/hackathons/$hackathonId/application',
    path: '/hackathons/$hackathonId/application',
    getParentRoute: () => AuthRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/_auth/evaluator': {
      id: '/_auth/evaluator'
      path: '/evaluator'
      fullPath: '/evaluator'
      preLoaderRoute: typeof AuthEvaluatorImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/factotum': {
      id: '/_auth/factotum'
      path: '/factotum'
      fullPath: '/factotum'
      preLoaderRoute: typeof AuthFactotumImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/faq': {
      id: '/_auth/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof AuthFaqImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/query': {
      id: '/_auth/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof AuthQueryImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/hackathons/$hackathonId/application': {
      id: '/_auth/hackathons/$hackathonId/application'
      path: '/hackathons/$hackathonId/application'
      fullPath: '/hackathons/$hackathonId/application'
      preLoaderRoute: typeof AuthHackathonsHackathonIdApplicationImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/hackathons/$hackathonId/schedule': {
      id: '/_auth/hackathons/$hackathonId/schedule'
      path: '/hackathons/$hackathonId/schedule'
      fullPath: '/hackathons/$hackathonId/schedule'
      preLoaderRoute: typeof AuthHackathonsHackathonIdScheduleImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/hackathons/$hackathonId/sponsors': {
      id: '/_auth/hackathons/$hackathonId/sponsors'
      path: '/hackathons/$hackathonId/sponsors'
      fullPath: '/hackathons/$hackathonId/sponsors'
      preLoaderRoute: typeof AuthHackathonsHackathonIdSponsorsImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/hackathons/$hackathonId/': {
      id: '/_auth/hackathons/$hackathonId/'
      path: '/hackathons/$hackathonId'
      fullPath: '/hackathons/$hackathonId'
      preLoaderRoute: typeof AuthHackathonsHackathonIdIndexImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthEvaluatorRoute: typeof AuthEvaluatorRoute
  AuthFactotumRoute: typeof AuthFactotumRoute
  AuthFaqRoute: typeof AuthFaqRoute
  AuthQueryRoute: typeof AuthQueryRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AuthHackathonsHackathonIdApplicationRoute: typeof AuthHackathonsHackathonIdApplicationRoute
  AuthHackathonsHackathonIdScheduleRoute: typeof AuthHackathonsHackathonIdScheduleRoute
  AuthHackathonsHackathonIdSponsorsRoute: typeof AuthHackathonsHackathonIdSponsorsRoute
  AuthHackathonsHackathonIdIndexRoute: typeof AuthHackathonsHackathonIdIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthEvaluatorRoute: AuthEvaluatorRoute,
  AuthFactotumRoute: AuthFactotumRoute,
  AuthFaqRoute: AuthFaqRoute,
  AuthQueryRoute: AuthQueryRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthHackathonsHackathonIdApplicationRoute:
    AuthHackathonsHackathonIdApplicationRoute,
  AuthHackathonsHackathonIdScheduleRoute:
    AuthHackathonsHackathonIdScheduleRoute,
  AuthHackathonsHackathonIdSponsorsRoute:
    AuthHackathonsHackathonIdSponsorsRoute,
  AuthHackathonsHackathonIdIndexRoute: AuthHackathonsHackathonIdIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/evaluator': typeof AuthEvaluatorRoute
  '/factotum': typeof AuthFactotumRoute
  '/faq': typeof AuthFaqRoute
  '/query': typeof AuthQueryRoute
  '/': typeof AuthIndexRoute
  '/hackathons/$hackathonId/application': typeof AuthHackathonsHackathonIdApplicationRoute
  '/hackathons/$hackathonId/schedule': typeof AuthHackathonsHackathonIdScheduleRoute
  '/hackathons/$hackathonId/sponsors': typeof AuthHackathonsHackathonIdSponsorsRoute
  '/hackathons/$hackathonId': typeof AuthHackathonsHackathonIdIndexRoute
}

export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/evaluator': typeof AuthEvaluatorRoute
  '/factotum': typeof AuthFactotumRoute
  '/faq': typeof AuthFaqRoute
  '/query': typeof AuthQueryRoute
  '/': typeof AuthIndexRoute
  '/hackathons/$hackathonId/application': typeof AuthHackathonsHackathonIdApplicationRoute
  '/hackathons/$hackathonId/schedule': typeof AuthHackathonsHackathonIdScheduleRoute
  '/hackathons/$hackathonId/sponsors': typeof AuthHackathonsHackathonIdSponsorsRoute
  '/hackathons/$hackathonId': typeof AuthHackathonsHackathonIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/_auth/evaluator': typeof AuthEvaluatorRoute
  '/_auth/factotum': typeof AuthFactotumRoute
  '/_auth/faq': typeof AuthFaqRoute
  '/_auth/query': typeof AuthQueryRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/hackathons/$hackathonId/application': typeof AuthHackathonsHackathonIdApplicationRoute
  '/_auth/hackathons/$hackathonId/schedule': typeof AuthHackathonsHackathonIdScheduleRoute
  '/_auth/hackathons/$hackathonId/sponsors': typeof AuthHackathonsHackathonIdSponsorsRoute
  '/_auth/hackathons/$hackathonId/': typeof AuthHackathonsHackathonIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/signin'
    | '/evaluator'
    | '/factotum'
    | '/faq'
    | '/query'
    | '/'
    | '/hackathons/$hackathonId/application'
    | '/hackathons/$hackathonId/schedule'
    | '/hackathons/$hackathonId/sponsors'
    | '/hackathons/$hackathonId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/evaluator'
    | '/factotum'
    | '/faq'
    | '/query'
    | '/'
    | '/hackathons/$hackathonId/application'
    | '/hackathons/$hackathonId/schedule'
    | '/hackathons/$hackathonId/sponsors'
    | '/hackathons/$hackathonId'
  id:
    | '__root__'
    | '/_auth'
    | '/signin'
    | '/_auth/evaluator'
    | '/_auth/factotum'
    | '/_auth/faq'
    | '/_auth/query'
    | '/_auth/'
    | '/_auth/hackathons/$hackathonId/application'
    | '/_auth/hackathons/$hackathonId/schedule'
    | '/_auth/hackathons/$hackathonId/sponsors'
    | '/_auth/hackathons/$hackathonId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/signin"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/evaluator",
        "/_auth/factotum",
        "/_auth/faq",
        "/_auth/query",
        "/_auth/",
        "/_auth/hackathons/$hackathonId/application",
        "/_auth/hackathons/$hackathonId/schedule",
        "/_auth/hackathons/$hackathonId/sponsors",
        "/_auth/hackathons/$hackathonId/"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_auth/evaluator": {
      "filePath": "_auth/evaluator.tsx",
      "parent": "/_auth"
    },
    "/_auth/factotum": {
      "filePath": "_auth/factotum.tsx",
      "parent": "/_auth"
    },
    "/_auth/faq": {
      "filePath": "_auth/faq.tsx",
      "parent": "/_auth"
    },
    "/_auth/query": {
      "filePath": "_auth/query.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/hackathons/$hackathonId/application": {
      "filePath": "_auth/hackathons/$hackathonId/application.tsx",
      "parent": "/_auth"
    },
    "/_auth/hackathons/$hackathonId/schedule": {
      "filePath": "_auth/hackathons/$hackathonId/schedule.tsx",
      "parent": "/_auth"
    },
    "/_auth/hackathons/$hackathonId/sponsors": {
      "filePath": "_auth/hackathons/$hackathonId/sponsors.tsx",
      "parent": "/_auth"
    },
    "/_auth/hackathons/$hackathonId/": {
      "filePath": "_auth/hackathons/$hackathonId/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
